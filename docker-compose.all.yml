version: '3.8'

services:
  # PostgreSQL MCP Server
  postgres-mcp:
    build: 
      context: .
      dockerfile: docker/mcp_postgres/Dockerfile
    container_name: postgres-mcp-server
    restart: unless-stopped
    ports:
      - "3003:3003"
    environment:
      - PYTHONUNBUFFERED=1
      - MCP_AUTH_TOKEN=${MCP_AUTH_TOKEN:-}
      - DATABASE_WS_URL=${DATABASE_WS_URL:-http://dev01.int.stortz.tech:8000}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./logs:/app/logs
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import asyncio; from src.mcp_postgres.__main__ import main; asyncio.run(main())'"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Filesystem MCP Server
  filesystem-mcp:
    build: 
      context: .
      dockerfile: docker/mcp_filesystem/Dockerfile
    container_name: filesystem-mcp-server
    restart: unless-stopped
    ports:
      - "3005:3005"
    environment:
      - PYTHONUNBUFFERED=1
      - MCP_AUTH_TOKEN=${MCP_AUTH_TOKEN:-}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./logs:/app/logs
      - /tmp:/tmp:ro  # Read-only access to /tmp for filesystem operations
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import asyncio; from src.mcp_filesystem.__main__ import main; asyncio.run(main())'"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  mcp-network:
    driver: bridge
